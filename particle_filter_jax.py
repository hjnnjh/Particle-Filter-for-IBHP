#!/usr/bin/env python
# -*- encoding: utf-8 -*-
# noinspection SpellCheckingInspection
"""
@File    :   particle_filter_jax.py
@Time    :   2022/4/10 19:18
@Author  :   Jinnan Huang 
@Contact :   jinnan_huang@stu.xjtu.edu.cn
@Desc    :   None
"""
import jax.numpy as jnp
import numpy as np
from IBHP_simulation import IBHP
from jaxlib import xla_extension

# ------------------------------ global vars ------------------------------
ARRAY = xla_extension.DeviceArray

# ------------------------------ utils ------------------------------
# noinspection DuplicatedCode
def transfer_multi_dist_result_to_vec(text_array: ARRAY):
    """
    transform the data matrix generated by multinomial distribution to a concrete word matrix
    :param text_array: text vector
    :return:
    """

    def transfer_occurrence_data(idx: list, data: list):
        res = []
        res.extend([[idx[i]] * data[i] for i in range(len(idx))])
        res = [i for k in res for i in k]
        return res

    word_index = jnp.argwhere(text_array != 0)
    index_list = [word_index[word_index[:, 0] == n][:, 1].tolist() for n in jnp.unique(word_index[:, 0])]
    word_occurrence_list = [text_array[i, idx].tolist() for i, idx in enumerate(index_list)]
    word_corpus_mat = jnp.array([transfer_occurrence_data(index_list[i], word_occurrence_list[i])
                                 for i in range(len(index_list))])
    return word_corpus_mat


# noinspection PyUnresolvedReferences
class Particle(IBHP):
    """
    This class implements all the steps of single particle sampling, hyperparameter updating and particle weight
    calculation.
    """

    def __init__(self, word_corpus: ARRAY,
                 timestamp_array: ARRAY, text_array: ARRAY,
                 simulation_w: ARRAY = None, simulation_v: ARRAY = None, fix_w_v: bool = False,
                 sum_kernel_num: int = 3, random_seed: int = None):
        """
        :param word_corpus:
        :param timestamp_array:
        :param text_array:
        :param simulation_w:
        :param simulation_v:
        :param fix_w_v:
        :param sum_kernel_num:
        :param random_seed:
        """
        super(Particle, self).__init__()
        self.random_seed = random_seed
        self.fix_w_v = fix_w_v
        self.text_array = text_array
        self.timestamp_array = timestamp_array
        self.sum_kernel_num = sum_kernel_num
        self.word_dict = word_corpus
        self.S = self.word_dict
        self.log_particle_weight = None
        self.lambda_k_array_mat = None
        self.lambda_k_array = None
        if fix_w_v:
            self.simulation_v = simulation_v
            self.simulation_w = simulation_w
            assert self.simulation_w.shape[1] == self.simulation_v.shape[1]
            self.simulation_factor_num = self.simulation_w.shape[1]
        if self.random_seed:
            np.random.seed(self.random_seed)

    @staticmethod
    def exp_kernel(delta_t, beta: ARRAY, tau: ARRAY):
        """
        exp kernel
        :param delta_t:
        :param beta:
        :param tau:
        :return:
        """
        return beta * jnp.exp(-delta_t / tau)

